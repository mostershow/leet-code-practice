package easy;

/**
 * 面试题 17.16. 按摩师
 * 难度
 * 简单
 *
 * 61
 *
 * 收藏
 *
 * 分享
 * 切换为英文
 * 关注
 * 反馈
 * 一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。
 *
 * 注意：本题相对原题稍作改动
 *
 *
 *
 * 示例 1：
 *
 * 输入： [1,2,3,1]
 * 输出： 4
 * 解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
 * 示例 2：
 *
 * 输入： [2,7,9,3,1]
 * 输出： 12
 * 解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
 * 示例 3：
 *
 * 输入： [2,1,4,5,3,1,1,3]
 * 输出： 12
 * 解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。
 */
public class _17_16按摩师 {
    /**
     * 解题思路：
     *        这道题是一个递推的思路题，刚上手可能会有些不知如何下手，掌握不了计算方法
     *        1、首先，本题是一道相对来说线性的一个题目，计算方向从数组头到尾
     *        2、本题计算如何能够得到最大的数的和
     *
     *        知道上面两点之后呢，我们开始分析题意；
     *        1、数组取值必须有间隔，间隔是多少呢？其实就两个答案，1 or 2
     *        2、那么我们如何进行比较呢？ 从第一位就开始比较，从第一个人开始，我们取大的那个
     *            接着我们继续进行比较，我们将前面选择的数字就可以进行不停的累加，然后与后面的一位以及两位进行相加，然后比较，得出最大的那个
     *        3、比较大小我们可以使用java的 MAX() 函数
     *
     * @param nums
     * @return
     */
    public static int massage(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return nums[0];
        }
        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
        }
        return dp[n - 1];
    }

    public static void main(String[] args) {
        int num [] = {1,2,3,4,20};
        System.out.println(massage(num));
    }
}
